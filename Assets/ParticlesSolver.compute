#pragma kernel Update
#pragma kernel emitter

#include "CgIncludes/SimplexNoise3D.cginc"
float4 cbStartColor;
float4 cbEndColor;
float cbStartSize;
float cbEndSize;
int cbParticlesStorage;
float cbLifeDecay;              //

//float4 EmitterVelocityAndMass;
float4 EmitterPosition;
float startSpeed;
float gravity;
float duration;
float3 forceCenter;

struct Particle {
	float4 position;
	float4 color;
	float4 initialPosition;
	float4 initialVelocity;
	float4 velocity;
	
	//float4 ambient;
	//float2 massAndSize;
	float2 ageAndlife;
	float psize;
	//int ShuffleID;                   //??
	//float subResidual;
	//float2 padding;
};

float dt;
uint count;
int lastUsedParticle;
int size;
RWStructuredBuffer<Particle> Particles;
//RWStructuredBuffer<Particle> outParticles;
float hash(float n) {
	return frac(n * 17.0 * frac(n * 0.3183099));
}
float3 UniformSinRandom(float3 x)
{
	return frac(sin(x) * 15973.3467) * float3(2, 1, 2) - float3(1, 0, 1);
}
float SmoothStepC1(float t) {
	return clamp(t*t*t*(3 - 2 * t), 0, 1);
}


float3 snoiseVec3(float3 x) {

	float s = snoise(x);
	float s1 = snoise(float3(x.y - 19.1, x.z + 33.4, x.x + 47.2));
	float s2 = snoise(float3(x.z + 74.2, x.x - 124.5, x.y + 99.4));
	float3 c = float3(s, s1, s2);
	return c;
}
float3 curlNoise(float3 p) {

	const float e = .01;
	float3 dx = float3(e, 0.0, 0.0);
	float3 dy = float3(0.0, e, 0.0);
	float3 dz = float3(0.0, 0.0, e);

	float3 p_x0 = snoiseVec3(p - dx);
	float3 p_x1 = snoiseVec3(p + dx);
	float3 p_y0 = snoiseVec3(p - dy);
	float3 p_y1 = snoiseVec3(p + dy);
	float3 p_z0 = snoiseVec3(p - dz);
	float3 p_z1 = snoiseVec3(p + dz);

	float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
	float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
	float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

	const float divisor = 1.0 / (2.0 * e);
	return normalize(float3(x, y, z) * divisor);

}

[numthreads(256,1,1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	int idx = id.x;
	if (idx < cbParticlesStorage) {
		Particle particle = Particles[idx];
		particle.ageAndlife.x -= dt * cbLifeDecay;
		if (particle.ageAndlife.x >= 0) {
			float Interlop = SmoothStepC1(1-particle.ageAndlife.x / duration);
			particle.color = lerp(cbStartColor, cbEndColor, Interlop);
			particle.psize = lerp(cbStartSize, 0, Interlop);

			float3 noiceVelocity = float3(0, 0, 0);
			float3 combineForce = float3(0, 0, 0);    //
			float3 dir = particle.position.xyz - forceCenter;
			dir = normalize(dir);
			particle.velocity.xyz += combineForce * dt + gravity * 10 * float3(0, -1, 0) * dt;
			if(particle.ageAndlife.x> duration *0.7)
				particle.position.xyz += particle.velocity.xyz * dt;
			else particle.position.xyz += curlNoise(particle.position.xyz) * 0.05;
			Particles[idx] = particle;
		}
	}
 
}
[numthreads(256, 1, 1)]
void emitter(uint3 id : SV_DispatchThreadID)
{	
	int idx = (lastUsedParticle+id.x)% size;
	if (id.x < count) {
		Particle particle = Particles[idx];
		float seed = (idx+11)/ (float)cbParticlesStorage;
		float3 valueNoise;
		valueNoise = UniformSinRandom(float3(seed, 0, seed * 2));
		valueNoise = float3(valueNoise.x, 1, valueNoise.z);
		valueNoise = normalize(valueNoise);
		particle.velocity = float4(valueNoise * startSpeed, 1.0);
		particle.position = EmitterPosition;
		particle.ageAndlife.x = duration;
		Particles[idx] = particle;
	}
}
